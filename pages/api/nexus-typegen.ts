/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputCreateItem: { // input type
    category: string; // String!
    description: string; // String!
    id?: string | null; // String
    name: string; // String!
    saleType: NexusGenEnums['SaleType']; // SaleType!
    snHerzelia?: string | null; // String
    snWebSite?: string | null; // String
  }
  InputCreateSupplier: { // input type
    name: string; // String!
  }
  OrderInput: { // input type
    datetime: NexusGenScalars['DateTime']; // DateTime!
    supplierId: number; // Int!
  }
  OrderItemInput: { // input type
    itemId: string; // String!
    quantity: number; // Float!
    receieptNumber: string; // String!
  }
  createOrderInput: { // input type
    order: NexusGenInputs['OrderInput']; // OrderInput!
    orderItem: Array<NexusGenInputs['OrderItemInput'] | null>; // [OrderItemInput]!
  }
}

export interface NexusGenEnums {
  SaleType: "KG" | "PACK" | "UNIT" | "WIEGHT_PACK"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
}

export interface NexusGenObjects {
  CreateManyResponse: { // root type
    errors?: Array<string | null> | null; // [String]
    successCount?: number | null; // Int
  }
  Item: { // root type
    category: string; // String!
    description: string; // String!
    id?: number | null; // Int
    name: string; // String!
    OrderItems?: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
    saleType?: NexusGenEnums['SaleType'] | null; // SaleType
    snHerzelia?: string | null; // String
    snWebSite?: string | null; // String
  }
  Mutation: {};
  Order: { // root type
    date?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: number | null; // Int
    items?: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
    supplierId?: number | null; // Int
  }
  OrderItem: { // root type
    id?: number | null; // Int
    itemId?: string | null; // String
    orderId?: number | null; // Int
    quantity?: number | null; // Float
    receieptNumber?: string | null; // String
    supplierId?: number | null; // Int
  }
  Query: {};
  Supplier: { // root type
    id?: number | null; // Int
    name?: string | null; // String
    OrderItems?: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CreateManyResponse: { // field return type
    errors: Array<string | null> | null; // [String]
    successCount: number | null; // Int
  }
  Item: { // field return type
    category: string; // String!
    description: string; // String!
    id: number | null; // Int
    name: string; // String!
    OrderItems: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
    saleType: NexusGenEnums['SaleType'] | null; // SaleType
    snHerzelia: string | null; // String
    snWebSite: string | null; // String
  }
  Mutation: { // field return type
    createManyItems: Array<NexusGenRootTypes['Item'] | null> | null; // [Item]
    createOrder: NexusGenRootTypes['Order'] | null; // Order
  }
  Order: { // field return type
    date: NexusGenScalars['DateTime'] | null; // DateTime
    id: number | null; // Int
    items: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
    supplierId: number | null; // Int
  }
  OrderItem: { // field return type
    id: number | null; // Int
    itemId: string | null; // String
    orderId: number | null; // Int
    quantity: number | null; // Float
    receieptNumber: string | null; // String
    supplierId: number | null; // Int
  }
  Query: { // field return type
    orders: Array<NexusGenRootTypes['Order'] | null> | null; // [Order]
    suppliers: Array<NexusGenRootTypes['Supplier'] | null> | null; // [Supplier]
  }
  Supplier: { // field return type
    id: number | null; // Int
    name: string | null; // String
    OrderItems: Array<NexusGenRootTypes['OrderItem'] | null> | null; // [OrderItem]
  }
}

export interface NexusGenFieldTypeNames {
  CreateManyResponse: { // field return type name
    errors: 'String'
    successCount: 'Int'
  }
  Item: { // field return type name
    category: 'String'
    description: 'String'
    id: 'Int'
    name: 'String'
    OrderItems: 'OrderItem'
    saleType: 'SaleType'
    snHerzelia: 'String'
    snWebSite: 'String'
  }
  Mutation: { // field return type name
    createManyItems: 'Item'
    createOrder: 'Order'
  }
  Order: { // field return type name
    date: 'DateTime'
    id: 'Int'
    items: 'OrderItem'
    supplierId: 'Int'
  }
  OrderItem: { // field return type name
    id: 'Int'
    itemId: 'String'
    orderId: 'Int'
    quantity: 'Float'
    receieptNumber: 'String'
    supplierId: 'Int'
  }
  Query: { // field return type name
    orders: 'Order'
    suppliers: 'Supplier'
  }
  Supplier: { // field return type name
    id: 'Int'
    name: 'String'
    OrderItems: 'OrderItem'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createManyItems: { // args
      data?: Array<NexusGenInputs['InputCreateItem'] | null> | null; // [InputCreateItem]
    }
    createOrder: { // args
      data?: NexusGenInputs['createOrderInput'] | null; // createOrderInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}